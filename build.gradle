plugins {
    id 'java'
    id 'application'
    id 'maven-publish'
    id 'org.jetbrains.kotlin.jvm' version '1.4.31'
}

group 'ca.jahed.kubert'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()

    maven {
        name = "GitHubPackages"
        url = uri("https://maven.pkg.github.com/qumase/rtpoet")
        credentials {
            username = project.findProperty("gpr.user") ?: System.getenv("GH_USER")
            password = project.findProperty("gpr.key") ?: System.getenv("GH_TOKEN")
        }
    }
}

dependencies {
    compile 'info.picocli:picocli:4.5.0'
    compile 'ca.jahed.rtpoet:rtpoet:1.0-SNAPSHOT'
    compile 'ca.jahed.rtpoet:rtpoet-papyrusrt:1.0-SNAPSHOT'

    implementation "org.jetbrains.kotlin:kotlin-stdlib"
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
}

test {
    useJUnitPlatform()
}

jar {
    manifest {
        attributes 'Main-Class' : 'ca.jahed.kubert.Kubert'
    }
    baseName 'kubert'
    from configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
}

application {
    mainClassName = 'ca.jahed.kubert.Kubert'
}

publishing {
    repositories {
        mavenLocal()
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/qumase/kubert")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("GH_USER")
                password = project.findProperty("gpr.key") ?: System.getenv("GH_TOKEN")
            }
        }
    }

    publications {
        mvn(MavenPublication) {
            from components.java
            groupId = 'ca.jahed.kubert'
            artifactId = 'kubert'
            versionMapping {
                usage("java-api") {
                    fromResolutionOf("runtimeClasspath")
                }
                usage("java-runtime") {
                    fromResolutionResult()
                }
            }
            pom {
                name = "KubeRT"
                description = "Deploy UML-RT models on a Kubernetes cluster"
                url = "https://github.com/qumase/kubert"
                licenses {
                    license {
                        name = "The Apache License, Version 2.0"
                        url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                    }
                }
                developers {
                    developer {
                        id = "kjahed"
                        name = "Karim Jahed"
                        email = "jahed@cs.queensu.ca"
                    }
                }
                scm {
                    connection = "scm:git:git://github.com/qumase/kubert.git"
                    developerConnection = "scm:git:ssh://github.com/qumase/kubert.git"
                    url = "https://github.com/qumase/kubert/"
                }
            }
        }
    }
}
